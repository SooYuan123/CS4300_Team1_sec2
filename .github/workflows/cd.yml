name: CD (Deploy to Render on merge)

on:
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  build-test:
    name: Build & Test (coverage >=80%)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install coverage pytest pytest-django pytest-cov

      - name: Django tests with coverage (CI settings)
        env:
          DJANGO_SETTINGS_MODULE: CelestiaTrack.settings_ci
        run: |
          coverage run --source='.' manage.py test --settings=CelestiaTrack.settings_ci
          coverage report --fail-under=80

  deploy:
    name: Trigger Render deploy
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Deploy Hook
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          if [ -z "$RENDER_DEPLOY_HOOK" ]; then
            echo "Missing RENDER_DEPLOY_HOOK secret"; exit 1
          fi
          echo "Triggering Render deploy via Deploy Hook..."
          curl -fsS -X POST "$RENDER_DEPLOY_HOOK"
          echo "Deploy triggered."

      # Optional polling for status (requires service ID and API key)
      # Set repository variables (Settings -> Variables -> Actions) or env here:
      #   RENDER_SERVICE_ID, and add secret RENDER_API_KEY
      - name: Wait for Render deploy (optional)
        if: ${{ vars.RENDER_SERVICE_ID != '' && secrets.RENDER_API_KEY != '' }}
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ vars.RENDER_SERVICE_ID }}
        run: |
          echo "Polling Render API for latest deploy status..."
          ATTEMPTS=0
          MAX_ATTEMPTS=60
          SLEEP=10
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            STATUS=$(curl -sS -H "Authorization: Bearer $RENDER_API_KEY" "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys?limit=1" | jq -r '.[0].status')
            echo "Status: $STATUS"
            if [ "$STATUS" = "live" ] || [ "$STATUS" = "succeeded" ]; then
              echo "Deployment succeeded."; exit 0
            fi
            if [ "$STATUS" = "failed" ] || [ "$STATUS" = "canceled" ]; then
              echo "Deployment failed."; exit 1
            fi
            sleep $SLEEP
            ATTEMPTS=$((ATTEMPTS+1))
          done
          echo "Timed out waiting for deployment."; exit 1
